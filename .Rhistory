axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
)
baden_map <- function(visual_data, fill_data, legend)
{
print("map loading")
ggplot(
data=visual_data, #Database, where the visual data
aes(fill=fill_data) #Variable that dictates fill of each municipality
) +
#Map Background
geom_raster(
data = map500,
inherit.aes = FALSE,
aes(x,y,
alpha=relief
#since fill is already used for the data, alpha values are used to paint the map
#eventually, either a 2nd fill will be attempted with workarounds, or plot transitioned to leaflet instead of ggplot
),
) +
scale_alpha(#How to fill the map
name = "",
range = c(0.9,0),
guide = F
) +
geom_sf( #Create the municipality Boundaries
data = gemeinden_coords,
color = "transparent",
size = 0.5) +
scale_fill_viridis(#Set a custom fill for the data to be visualized
option = "magma",
alpha = 0.65, #make them slightly transparent to see map background
begin = 0.1,
end = 0.9,
direction = -1,
name = legend
) +
#remove visual clutter
theme_minimal() +
theme(
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
)
}
baden_map(gemeinden_coords, gemeinden_coords$Gesamtbevölkerung, "Gesamtbevölkerung")
ggplot(
data=visual_data, #Database, where the visual data
aes(fill=fill_data) #Variable that dictates fill of each municipality
) +
#Map Background
geom_raster(
data = map500,
inherit.aes = FALSE,
aes(x,y,
alpha=relief
#since fill is already used for the data, alpha values are used to paint the map
#eventually, either a 2nd fill will be attempted with workarounds, or plot transitioned to leaflet instead of ggplot
),
) +
scale_alpha(#How to fill the map
name = "",
range = c(0.9,0),
guide = F
) +
geom_sf( #Create the municipality Boundaries
data = gemeinden_coords,
color = "transparent",
size = 0.5) +
scale_fill_viridis(#Set a custom fill for the data to be visualized
option = "magma",
alpha = 0.6, #make them slightly transparent to see map background
begin = 0.1,
end = 0.9,
direction = -1,
name = legend
) +
#remove visual clutter
theme_minimal() +
theme(
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
)
baden_map <- function(visual_data, fill_data, legend)
{
print("map loading")
ggplot(
data=visual_data, #Database, where the visual data
aes(fill=fill_data) #Variable that dictates fill of each municipality
) +
#Map Background
geom_raster(
data = map500,
inherit.aes = FALSE,
aes(x,y,
alpha=relief
#since fill is already used for the data, alpha values are used to paint the map
#eventually, either a 2nd fill will be attempted with workarounds, or plot transitioned to leaflet instead of ggplot
),
) +
scale_alpha(#How to fill the map
name = "",
range = c(0.9,0),
guide = F
) +
geom_sf( #Create the municipality Boundaries
data = gemeinden_coords,
color = "transparent",
size = 0.5) +
scale_fill_viridis(#Set a custom fill for the data to be visualized
option = "magma",
alpha = 0.6, #make them slightly transparent to see map background
begin = 0.1,
end = 0.9,
direction = -1,
name = legend
) +
#remove visual clutter
theme_minimal() +
theme(
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
)
}
baden_map(gemeinden_coords, gemeinden_coords$Gesamtbevölkerung, "Gesamtbevölkerung")
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
map_options <- c(politics_improved$GPS,
politics_improved$SP,
politics_improved$GLP,
politics_improved$CVP,
politics_improved$FDP,
politics_improved$SVP)
legend_options <- c("GPS", "SP", "GLP", "CVP", "FDP", "SVP")
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
runApp('Migration-Simulator')
shiny::runApp('Migration-Simulator')
runApp('Migration-Simulator')
library(readxl)
rent <- read_excel("C:/Users/colte/Downloads/rent.xlsx",
sheet = "2021")
View(rent)
years = c("2021","2020","2019","2018","2017","2016","2015","2014","2013","2012")
length(years)
rent <- data.frame(matrix(ncol = 15, nrow = 0))
politics_improved <- data.frame(matrix(ncol = 7, nrow = 0)) #create a new database, empty
rent <- data.frame(matrix(ncol = 15, nrow = 0))
View(rent)
years = c("2021","2020","2019","2018","2017","2016","2015","2014","2013","2012")
rent <- data.frame(matrix(ncol = 15, nrow = 0))
for (i in 1:length(years)){
rent_year <- read_excel("C:/Users/colte/Downloads/rent.xlsx", +
sheet = i)
rent_year <- read_excel("C:/Users/colte/Downloads/rent.xlsx", +
sheet = i)
rent_year <- read_excel("C:/Users/colte/Downloads/rent.xlsx",
sheet = i)
length(years)
1:length(years)
for (i in 1:length(years)){
print(i)
#rent_year <- read_excel("C:/Users/colte/Downloads/rent.xlsx",
#                                             sheet = i)
#rent[nrow(rent)+1,] <- rent_year[26,]
}
years[1]
for (i in 1:length(years)){
rent_year <- read_excel("C:/Users/colte/Downloads/rent.xlsx",
sheet = years[i])
rent[nrow(rent)+1,] <- rent_year[26,]
}
for (i in 1:length(years)){
rent_year <- read_excel("C:/Users/colte/Downloads/rent.xlsx",
sheet = years[i])
rent[nrow(rent)+1,] <- rent_year[25,]
}
rent <- data.frame(matrix(ncol = 15, nrow = 0))
for (i in 1:length(years)){
rent_year <- read_excel("C:/Users/colte/Downloads/rent.xlsx",
sheet = years[i])
rent[nrow(rent)+1,] <- rent_year[24,]
}
#Cleaning Housing Data into 1 file
#Take data from rightadvisor
#Use Swiss stat data to extrapolate to older years -/-> inaccuratec
library(tidyverse)
library(dplyr)
rent <- data.frame(matrix(ncol = 16, nrow = 0))
for (i in 1:length(years)){
rent_year = years[i] %>%
append(read_excel("C:/Users/colte/Downloads/rent.xlsx",
sheet = years[i]))
rent[nrow(rent)+1,] <- rent_year[24,]
}
print(rent_year)
rent <- data.frame(matrix(ncol = 16, nrow = 0))
for (i in 1:length(years)){
rent_data <- read_excel("C:/Users/colte/Downloads/rent.xlsx",
sheet = years[i])
rent_data <- rent_data[24,]
rent_year = years[i] %>%
append(rent_data)%>%
print()
#rent[nrow(rent)+1,] <- rent_year[24,]
}
?append
for (i in 1:length(years)){
rent_data <- read_excel("C:/Users/colte/Downloads/rent.xlsx",
sheet = years[i])
rent_data <- rent_data[24,]
rent_year = years[i] %>%
append(rent_data)
print(rent_year)
#rent[nrow(rent)+1,] <- rent_year[24,]
}
#Cleaning Housing Data into 1 file
#Take data from rightadvisor
#Use Swiss stat data to extrapolate to older years -/-> inaccuratec
library(tidyverse)
for (i in 1:length(years)){
rent_data <- read_excel("C:/Users/colte/Downloads/rent.xlsx",
sheet = years[i])
rent_data <- rent_data[24,]
rent_year = years[i] %>%
append(rent_data)
print(rent_year)
rent[nrow(rent)+1,] <- rent_year
}
write.xlsx(rent, "C:/Users/colte/Downloads/rent_R.xlsx", sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
library(xlsx)
install.packages("xlsx")
library(xlsx)
write.xlsx(rent, "C:/Users/colte/Downloads/rent_R.xlsx", sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
olitics <- read_excel("politicalparties.xlsx",col_names = F)
ibrary(rstudioapi)
library(rstudioapi)
library(tidyverse)
library(dplyr)
library(lintr) # code linting
library(sf) # spatial data handling
library(raster)
library(viridis) # viridis color scale
library(cowplot)
library(readr)
library(readxl)
library(shiny)
library(magick)
library(leaflet)
politics <- read_excel("politicalparties.xlsx",col_names = F)
colnames(politics) <- c("Gemeinde","party_num", "party", "percentage") #name the columns
politics <- filter(politics, party_num %in% c(1,2,3,4,31,13))# Filter for only these parties: FDP, CVP, SP, SVP, GLP, GPS
politics_improved <- data.frame(matrix(ncol = 7, nrow = 0)) #create a new database, empty
colnames(politics_improved) <- c("Gemeinde", "FDP", "CVP", "SP", "SVP", "GPS", "GLP")
#for each municipality, give percentage for each party
for (i in 1:nrow(politics)){
if (i%%6==0) {#Since there are 6 parties, this will happen once for each municipality
row <- c(politics[i,1])#name of municipality
for (party in 1:6) {#go thru each party in 1 municipality
row <- append(row, politics[i+party-6,4])#Add the % for each party to the row
}
politics_improved[nrow(politics_improved)+1,] <- row #Add the new row to the new database
}
}
library(readxl)
Houseprices <- read_excel("Houseprices.xlsx")
View(Houseprices)
Houseprices <- read_excel("Houseprices.xlsx", sheet = "Sheet1")
Houseprices <- read_excel("Houseprices.xlsx", sheet = "Sheet2")
Houseprices <- read_excel("Houseprices.xlsx", sheet = "Sheet1")
house <- read_excel("Houseprices.xlsx", sheet = "Sheet2")
rent <- read_excel("Houseprices.xlsx", sheet = "Sheet3")
View(row)
View(rent)
View(house)
#3-7 -> 1-5
for (i in 1:nrow(Houseprices)) {
for (j in 3:19){
house[j,Houseprices[i,14]+2]
}
}
rate <- Houseprices[i,14]+2
View(rate)
rate <- as.numeric(Houseprices[i,14]+2)
house[j,rate]
rate <- Houseprices[i,14]
rate <- rate[1,1]
rate <- as.numeric(rate[1,1])
rate <- as.numeric(rate)
house[j,rate]
for (i in 2:nrow(Houseprices)) {
for (j in 3:19){
rate <- Houseprices[i,14]
rate <- as.numeric(rate)
house[j,rate]
}
}
house[j,rate]
for (j in 3:19){
rate <- Houseprices[i,14]
rate <- as.numeric(rate)
Houseprices[i,15] <- house[j,rate]
}
for (i in 2:nrow(Houseprices)) {
for (j in 3:19){
rate <- Houseprices[j,14]
rate <- as.numeric(rate)
Houseprices[i,15] <- house[j,rate]
}
}
house[j,rate]
for (i in 2:nrow(Houseprices)) {
rate <- Houseprices[j,14]
rate <- as.numeric(rate)+2
house[j,rate]
for (j in 3:19){
}
}
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
house[j,rate]
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
house[i,rate]
for (i in 2:nrow(Houseprices)) {
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
for (j in 3:19){
Houseprices[i, 15] <- house[j,rate]
}
}
for (i in 2:nrow(Houseprices)) {
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
for (j in 3:19){
Houseprices[i, 15] <- house[j,rate]
}
}
for (i in 2:nrow(Houseprices)) {
rate <- Houseprices[i,14]
if (is.na(rate)){
rate = as.numeric(rate)+19
}
else {
rate <- as.numeric(rate)+2
}
for (j in 3:19){
Houseprices[i, 15] <- house[j,rate]
}
}
for (i in 2:nrow(Houseprices)) {
rate <- Houseprices[i,14]
if (is.na(rate)){
rate = as.numeric(rate)+19
print("na",i)
}
else {
rate <- as.numeric(rate)+2
}
for (j in 3:19){
Houseprices[i, 15] <- house[j,rate]
}
}
for (i in 2:nrow(Houseprices)) {
rate <- Houseprices[i,14]
if (is.na(rate)){
rate = as.numeric(rate)+19
print("na",i)
}
else {
rate <- as.numeric(rate)+2
}
for (j in 3:19){
Houseprices[i, 15] <- house[j,rate]
}
}
for (i in 2:nrow(Houseprices)) {
rate <- Houseprices[i,14]
if (is.na(as.numeric(rate))){
rate = as.numeric(rate)+19
print("na",i)
}
else {
rate <- as.numeric(rate)+2
}
for (j in 3:19){
Houseprices[i, 15] <- house[j,rate]
}
}
for (i in 1:nrow(Houseprices)) {
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
for (j in 3:19){
Houseprices[i, 15] <- house[j,rate]
}
}
for (i in 1:nrow(Houseprices)) {
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
for (j in 3:19){
print(j)
Houseprices[i, 15] <- house[j,rate]
}
}
e
for (i in 1:nrow(Houseprices)) {
print(i)
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
for (j in 3:19){
print(j)
Houseprices[i, 15] <- house[j,rate]
}
}
print("i",i)
for (i in 1:nrow(Houseprices)) {
print("i",i)
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
for (j in 3:19){
print(j)
Houseprices[i, 15] <- house[j,rate]
}
}
for (i in 1:nrow(Houseprices)) {
print("i")
print(i)
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
for (j in 3:19){
print(j)
Houseprices[i, 15] <- house[j,rate]
}
}
for (i in 1:nrow(Houseprices)) {
print("i")
print(i)
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
for (j in 3:19){
print(j)
Houseprices[i, 15+j-3] <- house[j,rate]
}
}
for (i in 1:nrow(Houseprices)) {
print("i")
print(i)
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
for (j in 3:19){
print(j)
Houseprices[i, 15+j-3] <- house[j,rate]
Houseprices[i,15] <- house[j,rate+17]
}
}
for (i in 1:nrow(Houseprices)) {
print("i")
print(i)
rate <- Houseprices[i,14]
rate <- as.numeric(rate)+2
for (j in 3:19){
print(j)
Houseprices[i, 15+j-3] <- house[j,rate]
}
}
write.xlsx(Houseprices, "C:/Users/colte/Downloads/Houseprices_R.xlsx", sheetName = "Sheet1",
col.names = F, row.names = F, append = F)
library(xlsx)
write.xlsx(Houseprices, "C:/Users/colte/Downloads/Houseprices_R.xlsx", sheetName = "Sheet1",
col.names = F, row.names = F, append = F)
write.xlsx(Houseprices, "C:/Users/colte/Downloads/Houseprices_R.xlsx", sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = F)
